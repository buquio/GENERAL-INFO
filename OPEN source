recording video on powerpoint
https://www.youtube.com/watch?v=D8JV3w4TOVw


RUTH IKEGA- github contribution
https://www.youtube.com/watch?v=O9UZO5g9BvI

https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbC0xQmJXQmhiNHVmc3JLRXBPV041S21hbVczZ3xBQ3Jtc0tsSEVKRDd5cnpvZHBFaFBlcmtVN2x5cU13ZFB0aDFCX0pjcXZHYVljZ2swbkxtY1RtQWxRQ3ltOTVySE9rYTFQUzlTdEJvMGFyd2FVNHhqTk5MSl93dTQyUEhyemY0eEQ5UUdHdUUtd1padFBPR1VWZw&q=https%3A%2F%2Fgithub.com%2Fforem%2Fforem

https://www.youtube.com/watch?v=rXQPMINJUa4 
1.Introducing yourself to the project's mentor via email
2.Joining the project's chat, forums, or mailing list and introducing yourself
3.Using or installing the project
4.Reading the project's documentation
5.Looking at the open issues or feature requests for the project
6.Reading Outreachy alums' blogs who worked with that community


In most opensoure project you: 
a. discover a bug
b. look for the bug in an existing issue.
b. do a fresh contribution.

a.If you discover a issues/bug, first do the following:
Try resetting the code in the editor using the reset button on the page.
Try to do a Hard Refresh the browser
try Clearing Your Browser’s Local Storage 35.
try and check the mobile and on a desktop browser before confirming as a bug.
Ask from another person using the site if they experience the samething.
Ask for Help from a helpful community,Slack, or other chat channels, if the project has one
try Searching for Your Issue(open and closed) on GitHub for anyone who has posted about a similar issue.
If someone has reported the same issue, you can upvote the issue or comment to ask for confirmation before starting work.
If you can’t find any relevant issues on GitHub, then Create a New Issue 

b.If you’re looking for existing issues you can fix, every open source project has a /contribute page that highlights beginner-friendly issues you can start out with. Navigate to the main page of the repository on GitHub, and add /contribute at the end of the URL(for examplehttps://github.com/facebook/react/contribute).

/////////Organizations like Mozilla, Wikimedia, Gnome, and Linux Kernel take part in the program. They hire interns to work on their projects.

Documentation is very important.
1.properly documenting the information exchanged with the customer, 
2.you can write a knowledge object that explains how to connect to an OpenStack controller VM when the VM won’t boot, and it is stuck looking for block devices that do not exist anymore.

https://github.com/explore/
https://opensourcefriday.com/
https://www.firsttimersonly.com/
https://www.codetriage.com/
https://24pullrequests.com/
https://up-for-grabs.net/
https://contributor.ninja/
https://firstcontributions.github.io/
https://www.sourcesort.com/

https://www.firsttimersonly.com/
https://github.com/MunGell/awesome-for-beginners
https://blog.hyperiondev.com/index.php/2018/11/13/top-5-beginner-friendly-open-source-projects-github/

https://github.com/Syknapse/Contribute-To-This-Project
https://github.com/approachable-io/getting-started
https://github.com/RocktimSaikia/Contribute-101
xxxxopen sources
GitHub Explore
Open Source Friday
First Timers Only
CodeTriage
24 Pull Requests
Up For Grabs
Contributor-ninja
First Contributions
SourceSort

1.WOSCA book gallery api	A simple authentication API for the SCA books gallery app.	
https://github.com/she-code-africa/WOSCA-book-gallery-api	Node and Express	Beginner Intermediate

2.Meshery.io	Meshery is the multi-service mesh management plane offering lifecycle, configuration and performance management of service meshes and their workloads.
https://github.com/layer5io/meshery	Javascript, HTML, Markdown, Go, Documentation	Beginner Intermediate

3.FreeCodeCamp	The http://freeCodeCamp.com open-source codebase and curriculum. Learn to code and help nonprofits.	https://github.com/freecodecamp/freecodecamp	Javascript, Web, Html, Reactjs, Design, CSS	Beginner Intermediate Expert

4.ODK Build	ODK Build is a drag-and-drop form designer for ODK XForms. Thousands of users around the world depend on it for their data collection campaigns.	https://github.com/getodk/build	JavaScript, Ruby, User Experience	Beginner Intermediate Expert

5.Discourse	A platform for community discussion. Free, open, simple.	https://github.com/discourse/discourse	Ruby, JavaScript, Docker	Intermediate Expert

6.Vue.js	Simple yet powerful library for building modern web interfaces.	
https://github.com/vuejs/vue	Javascript, User-Interface, Vuejs	Beginner Intermediate Expert

7.Up-For-Grabs.net	This is a list of projects which have curated tasks specifically for new contributors. These issues are a great way to get started with a project or to help share the load of working on open source projects. Jump in!	
https://github.com/up-for-grabs/up-for-grabs.net	JavaScript, Jekyll, Web	Beginner

8.Zulip	This powerful, open source group chat application combines the immediacy of real-time chat with the useful productivity of threaded conversations. It’s one of the fastest growing open source group chat projects with over 300 contributors.	
https://github.com/zulip/zulip	Python, JavaScript, Markdown, Mobile Web, Design	Beginner Intermediate Expert



Here’s a handy checklist to evaluate whether a project is good for new contributors.

Does it have a license? Usually, there is a file called LICENSE in the root of the repository.
Project actively accepts contributions
Look at the commit activity on the master branch. On GitHub, you can see this information on a repository’s homepage.
When was the latest commit?
How many contributors does the project have
How often do people commit? (On GitHub, you can find this by clicking "Commits" in the top bar.)
Next, look at the project’s issues.
How many open issues are there?
Do maintainers respond quickly to issues when they are opened?
Is there active discussion on the issues?
Are the issues recent?
Are issues getting closed? (On GitHub, click the "closed" tab on the Issues page to see closed issues.)

Now also check the project’s pull requests.
How recently were any pull requests merged? (On GitHub, click the "closed" tab on the Pull Requests page to see closed PRs.)
Project is welcoming
A project that is friendly and welcoming signals that they will be receptive to new contributors.
Do the maintainers respond helpfully to questions in issues?
Are people friendly in the issues, discussion forum, and chat (for example, IRC or Slack)?
Do pull requests get reviewed?
Do maintainers thank people for their contributions?

The fundamentals are:

1.Fork the project & clone locally.
2.Create an upstream remote and sync your local copy before you branch.
3.Branch for each separate piece of work.
4.Do the work, write good commit messages, and read the CONTRIBUTING file if there is one.
5.Push to your origin repository.
6.Create a new PR in GitHub.
7.Respond to any code review feedback.

1.Firstly you need a local fork of the the project, so go ahead and press the “fork” button in GitHub.
2.Now you need a copy locally, so find the “SSH clone URL” in the right hand column and use that to clone locally using a terminal:$ git clone git@github.com:akrabat/zend-validator.git

3.Change into the new project’s directory:$ cd zend-validator
4.you need to set up a new remote that points to the original project,click on the link to the original forked repository
$ git remote add upstream git@github.com:zendframework/zend-validator.git
5.get it working on your computer. Hopefully there will be documentation how to do this in the README or INSTALL file.

6.It’s usually best to start by fixing a bug that is either annoying you or you’ve found on the project’s issue tracker.

7.Now that you have picks an issue, reproduce it on your version. Once you have reproduced it, read the code to work out where the problem is. Once you’ve found the code problem, you can move on to fixing it.

8.The general rule is that**** if you are bug fixing, then branch from master and if you are adding a new feature then branch from develop

9.For this example, we’ll assume we’re fixing a bug in zend-validator, so we branch from master:
$ git checkout master

NOTE:If there is a new change in upstream project.
$ git pull upstream master && git push origin master
Firstly we ensure we’re on the master branch. Then the git pull upstream master command will sync our local copy with the upstream project and the git push origin master syncs it to our forked GitHub project. 

10.Finally we create our new branch. You can name your branch whatever you like,Including the issue number is usually helpful.xxxxx $ git checkout -b hotfix/readme-update-#12457 
If the project uses git-flow as zend-validator does, then there are specific naming conventions where the branch is prefixed with “hotfix/” or “feature/”.  xxxx  $ git checkout -b hotfix/readme-update

11.Now you can do the work to fix the issue.
NOTE:If the project has tests, run them to ensure you haven’t broken anything.

11b.You may also add a new test to show that your change fixes the original problem.

12.To create a PR you need to push your branch to the origin remote and then press some buttons on GitHub.
To push a new branch:
$ git push -u origin hotfix/readme-update

13.Swap back to the browser and navigate to your fork of the project (https://github.com/akrabat/zend-validator in my case) and you’ll see that your new branch is listed at the top with a handy “Compare & pull request” button:

14.Then ensure that you provide a good, succinct title for your pull request and explain why you have created it in the description box. Add any relevant issue numbers if you have them.

15.If you scroll down a bit, you’ll see a diff of your changes. Double check that it contains what you expect.

Once you are happy, press the “Create pull request” button and you’re done.

16finally,Respond to any code review feedback.the maintainers will review your work and either request changes or merge it.i.e Code Reviews:covers the things that the maintainers will look for, so read it and ensure you’ve made their lives as easy as possible. your work could then be integrated into the project. 
